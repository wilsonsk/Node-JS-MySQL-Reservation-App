<head>
    <meta charset='UTD-8'>
    <!-- Latest compiled and minified Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <link href="style.css" rel="stylesheet">
    <title>Donors Page</title>
</head>

//AJAX && DocumentObjectModel functionality
<script>
    //business Table display and insertion

    //Bind buildTable function to On load of DOM
    document.addEventListener("DOMContentLoaded", buildTable);
    
    //Builds newTable and headerTable: build database donor table <Food>
    function buildTable(){
        var req = new XMLHttpRequest();    
        var URLString = "/Donors/food/load";
        //OPEN async request via request object; request will send upon completion of the current function
        req.open("GET", URLString, true);        //async == true
        req.addEventListener("load", function(){
            if(req.status >= 200 && req.status < 400){
                var response = JSON.parse(req.responseText);
                var newTable_1 = document.createElement("table_1");
                newTable_1.id = "tableID_1";
                
                //build Table via number of tuples/record occurrences returned from stored database (Food)
                for(var i = 0; i <response.length; i++){
                    var row = newTable_1.insertRow(i);
                    
                    //response object is stored as an array indexed by i within this for loop
                    //assign the row value attribute the value of the id for a given tuple/record occurrence; this is used to uniquely identify a given row/tuple/record occurrence
                    row.value = response[i].id;    //assign row.value: id field value of response index [i]
                    
                    //Build Table Body
                    
                    //insert 7 columns/fields within the inserted variable: row to be filled with database table values
                    var col_1 = row.insertCell(0);    //id column
                    var col_2 = row.insertCell(1);    //fid field
                    var col_3 = row.insertCell(2);    //business_name field
                    var col_4 = row.insertCell(3);    //street_address field
                    var col_5 = row.insertCell(4);    //city field
                    var col_6 = row.insertCell(5);    //state field
                    var col_7 = row.insertCell(6);    //zip  availability field
                    var col_8 = row.insertCell(7);    //specific_location availability field
                    
                    //format all columns to 500px for consistency
                    col_1.style.width = "500px";
                    col_2.style.width = "500px";
                    col_3.style.width = "500px";
                    col_4.style.width = "500px";
                    col_5.style.width = "500px";
                    col_6.style.width = "500px";
                    col_7.style.width = "500px";
                    col_8.style.width = "500px";

                    //insert field values into row cells from stored database; if the response attribute is null, then assign "EMPTY" to the given cell of the row
                    if(response[i].id != null){
                        col_1.innerHTML = response[i].id;
                    }else{
                        col_1.innerHTML = "EMPTY";
                    }
                    if(response[i].fid != null){
                        col_2.innerHTML = response[i].fid;
                    }else{
                        col_2.innerHTML = "EMPTY";
                    }                    
                    if(response[i].business_name != null){
                        col_3.innerHTML = response[i].business_name;
                    }else{
                        col_3.innerHTML = "EMPTY";
                    }       
                    if(response[i].street_address != null){
                        col_4.innerHTML = response[i].street_address;
                    }else{
                        col_4.innerHTML = "EMPTY";
                    }      
                    if(response[i].city != null){
                        col_5.innerHTML = response[i].city;
                    }else{
                        col_5.innerHTML = "EMPTY";
                    }
                    if(response[i].state != null){
                        col_6.innerHTML = response[i].state;
                    }else{
                        col_6.innerHTML = "EMPTY";
                    }
                    if(response[i].zip != null){
                        col_7.innerHTML = response[i].zip;
                    }else{
                        col_7.innerHTML = "EMPTY";
                    }
                    if(response[i].specific_location != null){
                        col_7.innerHTML = response[i].specific_location;
                    }else{
                        col_7.innerHTML = "EMPTY";
                    }
                }
                //Build Table Header

                //Insert "table" into Document Object Model
                var headerTable_1 = document.createElement("table_1");
                headerTable_1.id = "tableHeadID_1";
                
                //Create a row (THIS IS A SEPARATE TABLE that will sit on top of the "table") for the table's column/field names
                var head_row = headerTable_1.insertRow(0);
                var head_col_1 = head_row.insertCell(0);    //id column
                var head_col_2 = head_row.insertCell(1);    //fid field
                var head_col_3 = head_row.insertCell(2);    //business_name field
                var head_col_4 = head_row.insertCell(3);    //street_address field
                var head_col_5 = head_row.insertCell(4);    //city field
                var head_col_6 = head_row.insertCell(5);    //state field
                var head_col_7 = head_row.insertCell(6);    //zip field
                var head_col_8 = head_row.insertCell(7);    //specific_location field

                //Insert field names into columns of headerTable row
                head_col_1.innerHTML = "ID";
                head_col_2.innerHTML = "Food ID";
                head_col_3.innerHTML = "Business Name";
                head_col_4.innerHTML = "Street Address";
                head_col_5.innerHTML = "City";
                head_col_6.innerHTML = "State";
                head_col_7.innerHTML = "Zip Code";
                head_col_8.innerHTML = "Specific Location";

                //format all header columns to 500px for consistency
                head_col_1.style.width = "500px";
                head_col_2.style.width = "500px";
                head_col_3.style.width = "500px";
                head_col_4.style.width = "500px";
                head_col_5.style.width = "500px";
                head_col_6.style.width = "500px";
                head_col_7.style.width = "500px";   
                head_col_8.style.width = "500px";   
                
                //APPEND headerTable to html via div id: tableHeadArea1
                document.getElementById("tableHeadArea1").appendChild(headerTable_1);
                
                //APPEND newTable to html via div id: tableArea1
                document.getElementById("tableArea1").appendChild(newTable_1);  
                
                //Set border size of headerTable cells
                headerTable_1.setAttribute("border", 3);
                //Set border size of newTable cells
                newTable_1.setAttribute("border", 3);
            }else{
                console.log("Error in network request: " + request.statusText);        //request object works via request module in package.json
            }
        });
        req.send(null);
        //prevent default refresh 
        event.preventDefault();    
    }
    
    //Binds bindEntrySubmit function to the SUBMIT button/input of the donor form via eventListener function
    //bindEntrySubmit(): a send form data (to server.js to input form data into database) action on "click" of SUBMIT button/input of the donor form via eventListener function
    function bindEntrySubmit(){
        document.getElementById("entrySubmitBusiness").addEventListener("click", function(event){
            var req = new XMLHttpRequest();
            //base URL query string to send to server.js with appropriate query attributes 
            var URLString = "http://52.11.133.195:3000/Donors/business/insert?";
            
            //assigning form values to query variables which will be appened the URL query string
            if(document.getElementById("business_name").value != ""){
                var entry_business_name = 'business_name=' + document.getElementById("business_name").value;
                URLString += entry_business_name;
            }else{
                alert("Must Enter a Business Name");
                return;
            }
            if(document.getElementById("street_address").value != ""){
                var entry_street_address = 'street_address=' + document.getElementById("street_address").value;
                URLString += entry_street_address;
            }else{
                alert("Must Enter a Street Address");
                return;
            }            
            if(document.getElementById("city").value != ""){
                var entry_city = 'city=' + document.getElementById("city").value;
                URLString += entry_city;
            }else{
                alert("Must Enter a City");
                return;
            }
            if(document.getElementById("state").value != ""){
                var entry_state = 'state=' + document.getElementById("state").value;
                URLString += entry_state;
            }else{
                alert("Must Enter a State");
                return;
            }
            if(document.getElementById("zip").value != ""){
                var entry_zip = 'zip=' + document.getElementById("zip").value;
                URLString += entry_zip;
            }else{
                alert("Must Enter a Zip Code");
                return;
            }
            if(document.getElementById("specific_location").value != ""){
                var entry_specific_location = 'specific_location=' + document.getElementById("specific_location").value;
                URLString += entry_specific_location;
            }else{
                alert("Must Enter a Specific Location");
                return;
            }       
            
            //OPEN async request via request object
            req.open("GET", URLString, true);
            req.addEventListener("load", function(){
                if(req.status >= 200 && req.status < 400){
                    //Delete previous views of tables and re build them with new updated data from user form
                    var dTable = document.getElementById("tableID_1");
                    var dHTable = document.getElementById("tableHeadID_1");
                    dTable.parentNode.removeChild(dTable);
                    dHTable.parentNode.removeChild(dHTable);
                    buildTable();
                }else{
                    console.log("Error in network request:" + request.statusText)        //request object works via request module in package.json
                }
            });
            req.send(null);
            //Prevent default refresh
            event.preventDefault();
        });
    }
        
    //food Table display and insertion
        
    //Bind buildTable function to On load of DOM
    document.addEventListener("DOMContentLoaded", buildTable);
    
    //Builds newTable and headerTable: build database donor table <Food>
    function buildTable(){
        var req = new XMLHttpRequest();    
        var URLString = "/Donors/food/load";
        //OPEN async request via request object; request will send upon completion of the current function
        req.open("GET", URLString, true);        //async == true
        req.addEventListener("load", function(){
            if(req.status >= 200 && req.status < 400){
                var response = JSON.parse(req.responseText);
                var newTable = document.createElement("table_2");
                newTable.id = "tableID_2";
                
                //build Table via number of tuples/record occurrences returned from stored database (Food)
                for(var i = 0; i <response.length; i++){
                    var row = newTable.insertRow(i);
                    
                    //response object is stored as an array indexed by i within this for loop
                    //assign the row value attribute the value of the id for a given tuple/record occurrence; this is used to uniquely identify a given row/tuple/record occurrence
                    row.value = response[i].id;    //assign row.value: id field value of response index [i]
                    
                    //Build Table Body
                    
                    //insert 7 columns/fields within the inserted variable: row to be filled with database table values
                    var col_1 = row.insertCell(0);    //id column
                    var col_2 = row.insertCell(1);    //bid field
                    var col_3 = row.insertCell(2);    //food_type field
                    var col_4 = row.insertCell(3);    //quantity field
                    var col_5 = row.insertCell(4);    //availability_start field
                    var col_6 = row.insertCell(5);    //availability_end field

                    //format all columns to 500px for consistency
                    col_1.style.width = "500px";
                    col_2.style.width = "500px";
                    col_3.style.width = "500px";
                    col_4.style.width = "500px";
                    col_5.style.width = "500px";
                    col_6.style.width = "500px";

                    //insert field values into row cells from stored database; if the response attribute is null, then assign "EMPTY" to the given cell of the row
                    if(response[i].id != null){
                        col_1.innerHTML = response[i].id;
                    }else{
                        col_1.innerHTML = "EMPTY";
                    }
                    if(response[i].bid != null){
                        col_2.innerHTML = response[i].bid;
                    }else{
                        col_2.innerHTML = "EMPTY";
                    }                    
                    if(response[i].food_type != null){
                        col_3.innerHTML = response[i].food_type;
                    }else{
                        col_3.innerHTML = "EMPTY";
                    }       
                    if(response[i].quantity != null){
                        col_4.innerHTML = response[i].quantity;
                    }else{
                        col_4.innerHTML = "EMPTY";
                    }      
                    if(response[i].availability_start != null){
                        col_5.innerHTML = response[i].availability_start;
                    }else{
                        col_5.innerHTML = "EMPTY";
                    }
                    if(response[i].availability_end != null){
                        col_6.innerHTML = response[i].availability_end;
                    }else{
                        col_6.innerHTML = "EMPTY";
                    }

                }
                //Build Table Header

                //Insert "table_2" into Document Object Model
                var headerTable = document.createElement("table_2");
                headerTable.id = "tableHeadID_2";
                
                //Create a row (THIS IS A SEPARATE TABLE that will sit on top of the "table_2") for the table's column/field names
                var head_row = headerTable.insertRow(0);
                var head_col_1 = head_row.insertCell(0);    //id column
                var head_col_2 = head_row.insertCell(1);    //bid field
                var head_col_3 = head_row.insertCell(2);    //food_type field
                var head_col_4 = head_row.insertCell(3);    //quantity field
                var head_col_5 = head_row.insertCell(4);    //availability_start field
                var head_col_6 = head_row.insertCell(5);    //availability_end field

                //Insert field names into columns of headerTable row
                head_col_1.innerHTML = "ID";
                head_col_2.innerHTML = "Business ID";
                head_col_3.innerHTML = "Food Type";
                head_col_4.innerHTML = "Food Quantity/Servings";
                head_col_5.innerHTML = "Pickup Time Availability Start";
                head_col_6.innerHTML = "Pickup Time Availability End";

                //format all header columns to 500px for consistency
                head_col_1.style.width = "500px";
                head_col_2.style.width = "500px";
                head_col_3.style.width = "500px";
                head_col_4.style.width = "500px";
                head_col_5.style.width = "500px";
                head_col_6.style.width = "500px";

                //APPEND headerTable to html via div id: tableHeadArea2
                document.getElementById("tableHeadArea2").appendChild(headerTable);
                
                //APPEND newTable to html via div id: tableArea1
                document.getElementById("tableArea2").appendChild(newTable);  
                
                //Set border size of headerTable cells
                headerTable.setAttribute("border", 3);
                //Set border size of newTable cells
                newTable.setAttribute("border", 3);
            }else{
                console.log("Error in network request: " + request.statusText);        //request object works via request module in package.json
            }
        });
        req.send(null);
        //prevent default refresh 
        event.preventDefault();    
    }
    
    //business table display and insertion
    
    //Binds bindEntrySubmit function to the SUBMIT button/input of the donor form via eventListener function
    //bindEntrySubmit(): a send form data (to server.js to input form data into database) action on "click" of SUBMIT button/input of the donor form via eventListener function
    function bindEntrySubmit(){
        document.getElementById("entrySubmitFood").addEventListener("click", function(event){
            var req = new XMLHttpRequest();
            //base URL query string to send to server.js with appropriate query attributes 
            var URLString = "http://52.11.133.195:3000/Donors/food/insert?";
            
            //assigning form values to query variables which will be appened the URL query string
            if(document.getElementById("food_type").value != ""){
                var entry_food_type = 'food_type=' + document.getElementById("food_type").value;
                URLString += entry_food_type;
            }else{
                alert("Must Enter a Food Type");
                return;
            }
            if(document.getElementById("quantity").value != ""){
                var entry_quantity = 'quantity=' + document.getElementById("quantity").value;
                URLString += entry_quantity;
            }else{
                alert("Must Enter a Quantity/Servings");
                return;
            }
            if(document.getElementById("availability_start").value != ""){
                var entry_availability_start = 'availability_start=' + document.getElementById("availability_start").value;
                URLString += entry_availability_start;
            }else{
                alert("Must Enter a Food Availability Start Time");
                return;
            }
            if(document.getElementById("availability_end").value != ""){
                var entry_availability_end = 'availability_end=' + document.getElementById("availability_end").value;
                URLString += entry_availability_end;
            }else{
                alert("Must Enter a Food Availability End Time");
                return;
            }

            
            //OPEN async request via request object
            req.open("GET", URLString, true);
            req.addEventListener("load", function(){
                if(req.status >= 200 && req.status < 400){
                    //Delete previous views of tables and re build them with new updated data from user form
                    var dTable = document.getElementById("tableID_2");
                    var dHTable = document.getElementById("tableHeadID_2");
                    dTable.parentNode.removeChild(dTable);
                    dHTable.parentNode.removeChild(dHTable);
                    buildTable();
                }else{
                    console.log("Error in network request:" + request.statusText)        //request object works via request module in package.json
                }
            });
            req.send(null);
            //Prevent default refresh
            event.preventDefault();
        });
        
    }
        
    
    
</script>

<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="#">No Food Left Behind</a>
    </div>
  </div>
</nav>

<div class="jumbotron">
  <div class="container">
    <h1>No Food Left Behind</h1>
    <p>
        THIS CURRENT CODE IS BASED ON 1 DATABASE TABLE --- Updated: Current code is based on 3 database tables</br>
        WARNING: I have never attempted to load >1 database table onto one html page so please check my AJAX functions, we can split these 2 tables (diplay and insertion) into 2 pages if needed</br>
        WARNING: code got a little messy and some id tags might not match but i will fix asap</br>
        WARNING: server.js has not been updated to account for these new changes, i will also fix asap</br>

        UPDATE: Going to make 1 form instead of 2 and therefore 1 bindEntrySubmit function; server.js will have 1 insertion handler function</br>

        Kevin and Adrian have updated the database to include 3 tables: food, business, and food_business</br>
        All 3 tables will be displayed on this Donors page and will include 2 forms (food, business) to for the donors to fill out</br>
        I WILL ADJUST THE CODE TO SATISFY THE 3 TABLES</br>

        UPDATE: 5/21 - food_business table has been removed since food and business entities are now one-to-many. The fid attribute was removed from the business table. - Kevin</br>
    </p>
    
    <p><a class="btn btn-primary btn-lg" href="#" role="button">This is a button »</a></p>
  </div>
</div>


{{!--USER INTERFACE: Donor Form used to insert new data in database fields--}}
<span class="text-center">
    <h2>Donor Form</h2>
</span>

<div class="container">
    <div class="row">
        <div class="col-md-2"></div>
        
        <div class="col-md-4">
            <!--FORM 1: business table: id, fid, business_name, street_address, city, state, zip, specific_location -->
            <form role="form">
                <fieldset>
                    <legend>New Donor Business Entry:</legend>
                       <!-- id field is PRIMARY KEY && auto increments-->
                       <div class="form-group">                
                           <label for="business_name">Enter Business Name:</label>
                            <input type="text" class="form-control" name="business_name" id="business_name" placeholder="Business Name">
                        </div>
        
                        <div class="form-group">  
                            <label for="street_address">Enter Street Address:</label>
                            <input type="text" class="form-control" name="street_address" id="street_address" placeholder="Street Address">
                        </div>
                        
                        <div class="form-group">  
                            <label for="city">Enter Business City:</label>
                            <input type="text" class="form-control" name="city" id="city" placeholder="City"> 
                        </div>
                        
                        <div class="form-group">  
                            <label for="state">Enter Business State:</label>
                            <select class="form-control" name="state" id="state">
                                <option>--Select--</option>
                            	<option value="AL">Alabama</option>
                            	<option value="AK">Alaska</option>
                            	<option value="AZ">Arizona</option>
                            	<option value="AR">Arkansas</option>
                            	<option value="CA">California</option>
                            	<option value="CO">Colorado</option>
                            	<option value="CT">Connecticut</option>
                            	<option value="DE">Delaware</option>
                            	<option value="DC">District Of Columbia</option>
                            	<option value="FL">Florida</option>
                            	<option value="GA">Georgia</option>
                            	<option value="HI">Hawaii</option>
                            	<option value="ID">Idaho</option>
                            	<option value="IL">Illinois</option>
                            	<option value="IN">Indiana</option>
                            	<option value="IA">Iowa</option>
                            	<option value="KS">Kansas</option>
                            	<option value="KY">Kentucky</option>
                            	<option value="LA">Louisiana</option>
                            	<option value="ME">Maine</option>
                            	<option value="MD">Maryland</option>
                            	<option value="MA">Massachusetts</option>
                            	<option value="MI">Michigan</option>
                            	<option value="MN">Minnesota</option>
                            	<option value="MS">Mississippi</option>
                            	<option value="MO">Missouri</option>
                            	<option value="MT">Montana</option>
                            	<option value="NE">Nebraska</option>
                            	<option value="NV">Nevada</option>
                            	<option value="NH">New Hampshire</option>
                            	<option value="NJ">New Jersey</option>
                            	<option value="NM">New Mexico</option>
                            	<option value="NY">New York</option>
                            	<option value="NC">North Carolina</option>
                            	<option value="ND">North Dakota</option>
                            	<option value="OH">Ohio</option>
                            	<option value="OK">Oklahoma</option>
                            	<option value="OR">Oregon</option>
                            	<option value="PA">Pennsylvania</option>
                            	<option value="RI">Rhode Island</option>
                            	<option value="SC">South Carolina</option>
                            	<option value="SD">South Dakota</option>
                            	<option value="TN">Tennessee</option>
                            	<option value="TX">Texas</option>
                            	<option value="UT">Utah</option>
                            	<option value="VT">Vermont</option>
                            	<option value="VA">Virginia</option>
                            	<option value="WA">Washington</option>
                            	<option value="WV">West Virginia</option>
                            	<option value="WI">Wisconsin</option>
                            	<option value="WY">Wyoming</option>
                            </select>	
                        </div>
                        
                        <div class="form-group">  
                            <label for="zip">Enter Business Zip Code:</label>
                            <input type="text" class="form-control" name="zip" id="zip" placeholder="Zip Code">   
                        </div>
                        
                        <div class="form-group">  
                            <label for="specific_location">Enter Specific Location:</label>
                            <input type="text" class="form-control" name="specific_location" id="specific_location" placeholder="Specific Location">    
                        </div>
                        
                        <input type="submit" id="entrySubmitBusiness" class="btn btn-primary">
                </fieldset>
            </form>
        </div>
        
        <div class="col-md-1"></div>
        
        <div class="col-md-4">
            <!--FORM 1: food table: id, bid, food_type, quantity, available_start, available_end -->
            <form role="form">
                <fieldset>
                    <legend>New Donor Food Entry:</legend>
                        <!-- id field is PRIMARY KEY && auto increments-->
                        <div class="form-group"> 
                            <label for="food_type">Enter a Food Type:</label>
                            <input type="text" class="form-control" name="food_type" id="food_type" placeholder="Food Type">
                        </div>
                        
                        <div class="form-group"> 
                            <label for="quantity">Enter Food Quantity/Servings:</label>
                            <input type="number" class="form-control" name="quantity" id="quantity" min="0" max="100" placeholder="Quantity">
                        </div>
                        
                        <div class="form-group"> 
                            <label for="available_start">Enter Pickup Time Availability Start:</label>
                            <input type="datetime-local" class="form-control" name="available_start" id="available_start"> 
                        </div>
                        
                        <div class="form-group"> 
                            <label for="available_end">Enter Pickup Time Availability End:</label>
                            <input type="datetime-local" class="form-control" name="available_end" id="available_end">  
                        </div>
                            
                        <input type="submit" id="entrySubmitFood" class="btn btn-primary">
                </fieldset>
            </form>
        </div>
    </div> <!-- row -->

    <div id="tableHeadArea1"></div>
    <div id"tableArea1"></div>
    
    <div id="tableHeadArea2"></div>
    <div id"tableArea2"></div>       


    <div class="row">
        <div class="col-md-2">Just an example table after getting data from food table</div>
        <div class="col-md-8">
            <table class="table table-striped table-hover">
            <thead> 
                <tr> 
                    <th>Type
                    <th>Quantity
                    <th>Pickup Availability Start
                    <th>Pickup Availability End
                </tr> 
            </thead>
            <tbody> 
                {{#each foods }}
                    <tr> 
                        <td>{{this.type}}
                        <td>{{this.quantity}}
                        <td>{{this.availability_start}}
                        <td>{{this.availability_end}}
                    </tr> 
                {{/each }}
            </tbody>
        </table>
        </div>
        <div class="col-md-2"></div>
    </div>
</div> <!-- container -->


<hr>
<footer>
<p>© 2016 Company, Inc.</p>
</footer>