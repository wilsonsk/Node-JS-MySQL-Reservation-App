//THIS CURRENT CODE IS BASED ON 1 DATABASE TABLE


//Kevin and Adrian have updated the database to include 3 tables: food, business, and food_business
//All 3 tables will be displayed on this Donors page and will include 2 forms (food, business) to for the donors to fill out
//I WILL ADJUST THE CODE TO SATISFY THE 3 TABLES

<head>
    <meta charset='UTD-8'>
    <link href="style.css" rel="stylesheet">
    <title>Donors Page</title>
</head>

//AJAX && DocumentObjectModel functionality
<script>
    //business Table display and insertion

    //Bind buildTable function to On load of DOM
    document.addEventListener("DOMContentLoaded", buildTable);
    
    //Builds newTable and headerTable: build database donor table <Food>
    function buildTable(){
        var req = new XMLHttpRequest();    
        var URLString = "http://52.11.133.195:3000/Donors/food/load";
        //OPEN async request via request object; request will send upon completion of the current function
        req.open("GET", URLString, true);        //async == true
        req.addEventListener("load", function(){
            if(req.status >= 200 && req.status < 400){
                var response = JSON.parse(req.responseText);
                var newTable = document.createElement("table");
                newTable.id = "tableID";
                
                //build Table via number of tuples/record occurrences returned from stored database (Food)
                for(var i = 0; i <response.length; i++){
                    var row = newTable.insertRow(i);
                    
                    //response object is stored as an array indexed by i within this for loop
                    //assign the row value attribute the value of the id for a given tuple/record occurrence; this is used to uniquely identify a given row/tuple/record occurrence
                    row.value = response[i].id;    //assign row.value: id field value of response index [i]
                    
                    //Build Table Body
                    
                    //insert 7 columns/fields within the inserted variable: row to be filled with database table values
                    var col_1 = row.insertCell(0);    //id column
                    var col_2 = row.insertCell(1);    //fid field
                    var col_3 = row.insertCell(2);    //business_name field
                    var col_4 = row.insertCell(3);    //street_address field
                    var col_5 = row.insertCell(4);    //city field
                    var col_6 = row.insertCell(5);    //state field
                    var col_7 = row.insertCell(6);    //zip  availability field
                    var col_8 = row.insertCell(7);    //specific_location availability field
                    
                    //format all columns to 500px for consistency
                    col_1.style.width = "500px";
                    col_2.style.width = "500px";
                    col_3.style.width = "500px";
                    col_4.style.width = "500px";
                    col_5.style.width = "500px";
                    col_6.style.width = "500px";
                    col_7.style.width = "500px";
                    col_8.style.width = "500px";

                    //insert field values into row cells from stored database; if the response attribute is null, then assign "EMPTY" to the given cell of the row
                    if(response[i].id != null){
                        col_1.innerHTML = response[i].id;
                    }else{
                        col_1.innerHTML = "EMPTY";
                    }
                    if(response[i].fid != null){
                        col_2.innerHTML = response[i].fid;
                    }else{
                        col_2.innerHTML = "EMPTY";
                    }                    
                    if(response[i].business_name != null){
                        col_3.innerHTML = response[i].business_name;
                    }else{
                        col_3.innerHTML = "EMPTY";
                    }       
                    if(response[i].street_address != null){
                        col_4.innerHTML = response[i].street_address;
                    }else{
                        col_4.innerHTML = "EMPTY";
                    }      
                    if(response[i].city != null){
                        col_5.innerHTML = response[i].city;
                    }else{
                        col_5.innerHTML = "EMPTY";
                    }
                    if(response[i].state != null){
                        col_6.innerHTML = response[i].state;
                    }else{
                        col_6.innerHTML = "EMPTY";
                    }
                    if(response[i].zip != null){
                        col_7.innerHTML = response[i].zip;
                    }else{
                        col_7.innerHTML = "EMPTY";
                    }
                    if(response[i].specific_location != null){
                        col_7.innerHTML = response[i].specific_location;
                    }else{
                        col_7.innerHTML = "EMPTY";
                    }
                }
                //Build Table Header

                //Insert "table" into Document Object Model
                var headerTable = document.createElement("table");
                headerTable.id = "tableHeadID";
                
                //Create a row (THIS IS A SEPARATE TABLE that will sit on top of the "table") for the table's column/field names
                var head_row = headerTable.insertRow(0);
                var head_col_1 = head_row.insertCell(0);    //id column
                var head_col_2 = head_row.insertCell(1);    //fid field
                var head_col_3 = head_row.insertCell(2);    //business_name field
                var head_col_4 = head_row.insertCell(3);    //street_address field
                var head_col_5 = head_row.insertCell(4);    //city field
                var head_col_6 = head_row.insertCell(5);    //state field
                var head_col_7 = head_row.insertCell(6);    //zip field
                var head_col_8 = head_row.insertCell(7);    //specific_location field

                //Insert field names into columns of headerTable row
                head_col_1.innerHTML = "ID";
                head_col_2.innerHTML = "Food ID";
                head_col_3.innerHTML = "Business Name";
                head_col_4.innerHTML = "Street Address";
                head_col_5.innerHTML = "City";
                head_col_6.innerHTML = "State";
                head_col_7.innerHTML = "Zip Code";
                head_col_8.innerHTML = "Specific Location";

                //format all header columns to 500px for consistency
                head_col_1.style.width = "500px";
                head_col_2.style.width = "500px";
                head_col_3.style.width = "500px";
                head_col_4.style.width = "500px";
                head_col_5.style.width = "500px";
                head_col_6.style.width = "500px";
                head_col_7.style.width = "500px";   
                head_col_8.style.width = "500px";   
                
                //APPEND headerTable to html via div id: tableHeadArea1
                document.getElementById("tableHeadArea1").appendChild(headerTable);
                
                //APPEND newTable to html via div id: tableArea1
                document.getElementById("tableArea1").appendChild(newTable);  
                
                //Set border size of headerTable cells
                headerTable.setAttribute("border", 3);
                //Set border size of newTable cells
                newTable.setAttribute("border", 3);
            }else{
                console.log("Error in network request: " + request.statusText);        //request object works via request module in package.json
            }
        });
        req.send(null);
        //prevent default refresh 
        event.preventDefault();    
    }
    
    //Binds bindEntrySubmit function to the SUBMIT button/input of the donor form via eventListener function
    //bindEntrySubmit(): a send form data (to server.js to input form data into database) action on "click" of SUBMIT button/input of the donor form via eventListener function
    function bindEntrySubmit(){
        document.getElementById("entrySubmitBusiness").addEventListener("click", function(event){
            var req = new XMLHttpRequest();
            //base URL query string to send to server.js with appropriate query attributes 
            var URLString = "http://52.11.133.195:3000/Donors/business/insert?";
            
            //assigning form values to query variables which will be appened the URL query string
            if(document.getElementById("business_name").value != ""){
                var entry_business_name = 'business_name=' + document.getElementById("business_name").value;
                URLString += entry_business_name;
            }else{
                alert("Must Enter a Business Name");
                return;
            }
            if(document.getElementById("food_type").value != ""){
                var entry_food_type = 'food_type=' + document.getElementById("food_type").value;
                URLString += entry_food_type;
            }else{
                alert("Must Enter a Food Type");
                return;
            }
            if(document.getElementById("quantity").value != ""){
                var entry_quantity = 'quantity=' + document.getElementById("quantity").value;
                URLString += entry_quantity;
            }else{
                alert("Must Enter a Quantity/Servings");
                return;
            }
            if(document.getElementById("address").value != ""){
                var entry_address = 'address=' + document.getElementById("address").value;
                URLString += entry_address;
            }else{
                alert("Must Enter a Business Address");
                return;
            }
            if(document.getElementById("specific_location").value != ""){
                var entry_specific_location = 'specific_location=' + document.getElementById("specific_location").value;
                URLString += entry_specific_location;
            }else{
                alert("Must Enter a Specific Location");
                return;
            }       
            if(document.getElementById("time_availability").value != ""){
                var entry_time_availability = 'time_availability=' + document.getElementById("time_availability").value;
                URLString += entry_time_availability;
            }else{
                alert("Must Enter a Pickup Time Availability");
                return;
            }     
            
            //OPEN async request via request object
            req.open("GET", URLString, true);
            req.addEventListener("load", function(){
                if(req.status >= 200 && req.status < 400){
                    //Delete previous views of tables and re build them with new updated data from user form
                    var dTable = document.getElementById("tableID");
                    var dHTable = document.getElementById("tableHeadID");
                    dTable.parentNode.removeChild(dTable);
                    dHTable.parentNode.removeChild(dHTable);
                    buildTable();
                }else{
                    console.log("Error in network request:" + request.statusText)        //request object works via request module in package.json
                }
            });
            req.send(null);
            //Prevent default refresh
            event.preventDefault();
        });
        
    //food Table display and insertion
        
    //Bind buildTable function to On load of DOM
    document.addEventListener("DOMContentLoaded", buildTable);
    
    //Builds newTable and headerTable: build database donor table <Food>
    function buildTable(){
        var req = new XMLHttpRequest();    
        var URLString = "http://52.11.133.195:3000/Donors/food/load";
        //OPEN async request via request object; request will send upon completion of the current function
        req.open("GET", URLString, true);        //async == true
        req.addEventListener("load", function(){
            if(req.status >= 200 && req.status < 400){
                var response = JSON.parse(req.responseText);
                var newTable = document.createElement("table");
                newTable.id = "tableID";
                
                //build Table via number of tuples/record occurrences returned from stored database (Food)
                for(var i = 0; i <response.length; i++){
                    var row = newTable.insertRow(i);
                    
                    //response object is stored as an array indexed by i within this for loop
                    //assign the row value attribute the value of the id for a given tuple/record occurrence; this is used to uniquely identify a given row/tuple/record occurrence
                    row.value = response[i].id;    //assign row.value: id field value of response index [i]
                    
                    //Build Table Body
                    
                    //insert 7 columns/fields within the inserted variable: row to be filled with database table values
                    var col_1 = row.insertCell(0);    //id column
                    var col_2 = row.insertCell(1);    //business_name field
                    var col_3 = row.insertCell(2);    //food_type field
                    var col_4 = row.insertCell(3);    //quantity field
                    var col_5 = row.insertCell(4);    //address field
                    var col_6 = row.insertCell(5);    //specific_location field
                    var col_7 = row.insertCell(6);    //time availability field
                    
                    //format all columns to 500px for consistency
                    col_1.style.width = "500px";
                    col_2.style.width = "500px";
                    col_3.style.width = "500px";
                    col_4.style.width = "500px";
                    col_5.style.width = "500px";
                    col_6.style.width = "500px";
                    col_7.style.width = "500px";

                    //insert field values into row cells from stored database; if the response attribute is null, then assign "EMPTY" to the given cell of the row
                    if(response[i].id != null){
                        col_1.innerHTML = response[i].id;
                    }else{
                        col_1.innerHTML = "EMPTY";
                    }
                    if(response[i].business_name != null){
                        col_2.innerHTML = response[i].business_name;
                    }else{
                        col_2.innerHTML = "EMPTY";
                    }                    
                    if(response[i].food_type != null){
                        col_3.innerHTML = response[i].food_type;
                    }else{
                        col_3.innerHTML = "EMPTY";
                    }       
                    if(response[i].quantity != null){
                        col_4.innerHTML = response[i].quantity;
                    }else{
                        col_4.innerHTML = "EMPTY";
                    }      
                    if(response[i].address != null){
                        col_5.innerHTML = response[i].address;
                    }else{
                        col_5.innerHTML = "EMPTY";
                    }
                    if(response[i].specific_location != null){
                        col_6.innerHTML = response[i].specific_location;
                    }else{
                        col_6.innerHTML = "EMPTY";
                    }
                    if(response[i].time_availability != null){
                        col_7.innerHTML = response[i].time_availability;
                    }else{
                        col_7.innerHTML = "EMPTY";
                    }
                }
                //Build Table Header

                //Insert "table" into Document Object Model
                var headerTable = document.createElement("table");
                headerTable.id = "tableHeadID";
                
                //Create a row (THIS IS A SEPARATE TABLE that will sit on top of the "table") for the table's column/field names
                var head_row = headerTable.insertRow(0);
                var head_col_1 = head_row.insertCell(0);    //id column
                var head_col_2 = head_row.insertCell(1);    //business_name field
                var head_col_3 = head_row.insertCell(2);    //food_type field
                var head_col_4 = head_row.insertCell(3);    //quantity field
                var head_col_5 = head_row.insertCell(4);    //address field
                var head_col_6 = head_row.insertCell(5);    //specific_location field
                var head_col_7 = head_row.insertCell(6);    //time availability field
                
                //Insert field names into columns of headerTable row
                head_col_1.innerHTML = "ID";
                head_col_2.innerHTML = "Business Name";
                head_col_3.innerHTML = "Food Type";
                head_col_4.innerHTML = "Food Quantity/Servings";
                head_col_5.innerHTML = "Business Address";
                head_col_6.innerHTML = "Specific Pickup Location";
                head_col_7.innerHTML = "Pickup Time Availability";
                
                //format all header columns to 500px for consistency
                head_col_1.style.width = "500px";
                head_col_2.style.width = "500px";
                head_col_3.style.width = "500px";
                head_col_4.style.width = "500px";
                head_col_5.style.width = "500px";
                head_col_6.style.width = "500px";
                head_col_7.style.width = "500px";   
                
                //APPEND headerTable to html via div id: tableHeadArea2
                document.getElementById("tableHeadArea2").appendChild(headerTable);
                
                //APPEND newTable to html via div id: tableArea1
                document.getElementById("tableArea2").appendChild(newTable);  
                
                //Set border size of headerTable cells
                headerTable.setAttribute("border", 3);
                //Set border size of newTable cells
                newTable.setAttribute("border", 3);
            }else{
                console.log("Error in network request: " + request.statusText);        //request object works via request module in package.json
            }
        });
        req.send(null);
        //prevent default refresh 
        event.preventDefault();    
    }
    
    //business table display and insertion
    
    //Binds bindEntrySubmit function to the SUBMIT button/input of the donor form via eventListener function
    //bindEntrySubmit(): a send form data (to server.js to input form data into database) action on "click" of SUBMIT button/input of the donor form via eventListener function
    function bindEntrySubmit(){
        document.getElementById("entrySubmit").addEventListener("click", function(event){
            var req = new XMLHttpRequest();
            //base URL query string to send to server.js with appropriate query attributes 
            var URLString = "http://52.11.133.195:3000/Donors/food/insert?";
            
            //assigning form values to query variables which will be appened the URL query string
            if(document.getElementById("business_name").value != ""){
                var entry_business_name = 'business_name=' + document.getElementById("business_name").value;
                URLString += entry_business_name;
            }else{
                alert("Must Enter a Business Name");
                return;
            }
            if(document.getElementById("food_type").value != ""){
                var entry_food_type = 'food_type=' + document.getElementById("food_type").value;
                URLString += entry_food_type;
            }else{
                alert("Must Enter a Food Type");
                return;
            }
            if(document.getElementById("quantity").value != ""){
                var entry_quantity = 'quantity=' + document.getElementById("quantity").value;
                URLString += entry_quantity;
            }else{
                alert("Must Enter a Quantity/Servings");
                return;
            }
            if(document.getElementById("address").value != ""){
                var entry_address = 'address=' + document.getElementById("address").value;
                URLString += entry_address;
            }else{
                alert("Must Enter a Business Address");
                return;
            }
            if(document.getElementById("specific_location").value != ""){
                var entry_specific_location = 'specific_location=' + document.getElementById("specific_location").value;
                URLString += entry_specific_location;
            }else{
                alert("Must Enter a Specific Location");
                return;
            }       
            if(document.getElementById("time_availability").value != ""){
                var entry_time_availability = 'time_availability=' + document.getElementById("time_availability").value;
                URLString += entry_time_availability;
            }else{
                alert("Must Enter a Pickup Time Availability");
                return;
            }     
            
            //OPEN async request via request object
            req.open("GET", URLString, true);
            req.addEventListener("load", function(){
                if(req.status >= 200 && req.status < 400){
                    //Delete previous views of tables and re build them with new updated data from user form
                    var dTable = document.getElementById("tableID");
                    var dHTable = document.getElementById("tableHeadID");
                    dTable.parentNode.removeChild(dTable);
                    dHTable.parentNode.removeChild(dHTable);
                    buildTable();
                }else{
                    console.log("Error in network request:" + request.statusText)        //request object works via request module in package.json
                }
            });
            req.send(null);
            //Prevent default refresh
            event.preventDefault();
        });
        
    }
        
    
    
</script>

//USER INTERFACE: Donor Form used to insert new data in database fields
<h1>No Food Left Behind</h1>
<h2>Donor Form</h2>
<div>
    <!--FORM 1: business table: id, fid, business_name, street_address, city, state, zip, specific_location -->
    <form>
        <fieldset>
            <legend>New Donor Business Entry:</legend>
           <!-- id field is PRIMARY KEY && auto increments-->
                <label for="business_name">Enter Business Name:</label>
                    <input type="text" name="business_name" id="business_name">
                <label for="street_address">Enter Street Address:</label>
                    <input type="text" name="street_address" id="street_address">
                <label for="city">Enter Business City:</label>
                    <input type="text" name="city" id="city"> 
                <label for="state">Enter Business State:</label>
                    <input type="text" name="state" id="state">
                <label for="zip">Enter Business Zip Code:</label>
                    <input type="text" name="zip" id="zip">   
                <label for="specific_location">Enter Specific Location:</label>
                    <input type="text" name="specific_location" id="specific_location">           
                <input type="submit" id="entrySubmitBusiness">
        </fieldset>
    </form>
</div>
<div>
    <!--FORM 1: food table: id, bid, food_type, quantity, available_start, available_end -->
    <form>
        <fieldset>
            <legend>New Donor Food Entry:</legend>
           <!-- id field is PRIMARY KEY && auto increments-->
                <label for="business_name">Enter Business Name:</label>
                    <input type="text" name="business_name" id="business_name">
                <label for="food_type">Enter Food Type:</label>
                    <input type="text" name="food_type" id="food_type">
                <label for="quantity">Enter Food Quantity/Servings:</label>
                    <input type="text" name="quantity" id="quantity"> 
                <label for="available_start">Enter Pickup Time Availability Start:</label>
                    <input type="text" name="available_start" id="available_start">   
                <label for="available_end">Enter Pickup Time Availability End:</label>
                    <input type="text" name="available_end" id="available_end">           
                <input type="submit" id="entrySubmitFood">
        </fieldset>
    </form>
</div>
<div id="tableHeadArea1"></div>
<div id"tableArea1"></div>

<div id="tableHeadArea2"></div>
<div id"tableArea2"></div>